# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the deploy branch and feature branches
  push:
    branches: 
    - '2023'
    - 'feature/**'
    - 'feat/**'
    - 'hotfix/**'
    - 'release/**'

  pull_request:
    branches:
    - '2023'
    - 'feature/**'
    - 'feat/**'
    - 'hotfix/**'
    - 'release/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        
      - name: Create minified build directory
        run: mkdir -p build
        
      - name: Copy source files to build directory
        run: |
          # Verify source files exist before processing
          if ! find . -name "*.html" -o -name "*.css" -o -name "*.js" | grep -q .; then
            echo "Warning: No HTML, CSS, or JS files found to process"
            exit 1
          fi
          
          # Copy HTML, CSS, and JS files from all subdirectories
          find . -name "*.html" -o -name "*.css" -o -name "*.js" | while read file; do
            # Skip files in excluded directories
            if echo "$file" | grep -E '(\./build/|\./node_modules/|\./\.git/)' >/dev/null; then
              continue
            fi
            
            # Create directory structure in build
            dir=$(dirname "$file" | sed 's|^\./||')
            mkdir -p "build/$dir"
            cp "$file" "build/$file"
          done
          
          # Verify files were copied successfully
          copied_count=$(find build -name "*.html" -o -name "*.css" -o -name "*.js" | wc -l)
          echo "Successfully copied $copied_count files to build directory"

      - name: Setup Node.js
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v4.0.3
        with:
          node-version: '18'
          
      - name: Install minifiers
        run: |
          npm install -g @swc/cli@0.4.0 @swc/core@1.7.26
          npm install -g clean-css-cli@5.6.3
          npm install -g html-minifier-terser@7.2.0
        
      - name: Minify JS files with SWC
        run: |
          find build -name '*.js' -not -name '*.min.js' -type f | while read file; do
            swc "$file" --minify -o "${file%.js}.min.js"
          done
          
      - name: Minify CSS files
        run: |
          find build -name '*.css' -not -name '*.min.css' -type f | while read file; do
            cleancss "$file" -o "${file%.css}.min.css"
          done
          
      - name: Minify HTML files
        run: |
          find build -name '*.html' -type f | while read file; do
            html-minifier-terser \
              --collapse-whitespace \
              --remove-comments \
              --remove-optional-tags \
              --remove-redundant-attributes \
              --remove-script-type-attributes \
              --remove-tag-whitespace \
              --use-short-doctype \
              --minify-css true \
              --minify-js true \
              "$file" -o "$file"
          done
     
      - name: Enhanced validation
        run: |
          # Check that minified files exist, are not empty, and are valid
          total_original_size=0
          total_minified_size=0
          
          echo "Validating and measuring minified CSS files..."
          for original in $(find build -name '*.css' -not -name '*.min.css'); do
            minified="${original%.css}.min.css"
            if [ -f "$minified" ]; then
              if [ ! -s "$minified" ]; then
                echo "Error: $minified is empty"
                exit 1
              fi
              # Basic CSS syntax validation
              if ! grep -q '{' "$minified" || ! grep -q '}' "$minified"; then
                echo "Warning: $minified may not be valid CSS"
              fi
              # Size comparison
              orig_size=$(wc -c < "$original")
              min_size=$(wc -c < "$minified")
              total_original_size=$((total_original_size + orig_size))
              total_minified_size=$((total_minified_size + min_size))
              echo "CSS: $original ($orig_size bytes) -> $minified ($min_size bytes)"
            fi
          done
          
          echo "Validating and measuring minified JS files..."
          for original in $(find build -name '*.js' -not -name '*.min.js'); do
            minified="${original%.js}.min.js"
            if [ -f "$minified" ]; then
              if [ ! -s "$minified" ]; then
                echo "Error: $minified is empty"
                exit 1
              fi
              # Basic JS validation (size already checked above)
              if ! grep -q '[a-zA-Z]' "$minified"; then
                echo "Warning: $minified may not contain valid JavaScript"
              fi
              # Size comparison
              orig_size=$(wc -c < "$original")
              min_size=$(wc -c < "$minified")
              total_original_size=$((total_original_size + orig_size))
              total_minified_size=$((total_minified_size + min_size))
              echo "JS: $original ($orig_size bytes) -> $minified ($min_size bytes)"
            fi
          done
          
          echo "Validating HTML files and measuring size reduction..."
          for file in $(find build -name '*.html'); do
            if [ ! -s "$file" ]; then
              echo "Error: $file is empty"
              exit 1
            fi
            # Check for basic HTML structure
            if ! grep -q '<html' "$file" && ! grep -q '<!DOCTYPE' "$file"; then
              echo "Warning: $file may not be valid HTML"
            fi
            # Note: HTML files are minified in place, so we show post-minification size
            html_size=$(wc -c < "$file")
            echo "HTML: $file ($html_size bytes after minification)"
          done
          
          # Calculate and display size reduction for CSS/JS
          if [ $total_original_size -gt 0 ]; then
            reduction=$((total_original_size - total_minified_size))
            percentage=$((reduction * 100 / total_original_size))
            echo "================================================"
            echo "CSS/JS Size Reduction Summary:"
            echo "Original size: $total_original_size bytes"
            echo "Minified size: $total_minified_size bytes"
            echo "Reduction: $reduction bytes ($percentage%)"
            echo "================================================"
          fi
          
          # Verify HTML files reference minified assets and link replacement worked
          echo "Verifying HTML link replacement..."
          html_files_with_assets=$(find build -name '*.html' -exec grep -l '\.css\|\.js' {} \; | wc -l)
          html_files_with_minified=$(find build -name '*.html' -exec grep -l '\.min\.' {} \; | wc -l)
          
          if [ "$html_files_with_assets" -gt 0 ]; then
            if [ "$html_files_with_minified" -gt 0 ]; then
              echo "✓ Found $html_files_with_minified HTML files referencing minified assets"
            else
              echo "⚠ Warning: $html_files_with_assets HTML files contain asset references but none reference minified assets"
            fi
            
            # Check for external URLs that shouldn't be modified
            external_count=$(find build -name '*.html' -exec grep -o 'href="http[^"]*\.css\|src="http[^"]*\.js' {} \; | wc -l)
            if [ "$external_count" -gt 0 ]; then
              echo "✓ Preserved $external_count external asset URLs"
            fi
          else
            echo "ℹ No HTML files contain CSS or JS references"
          fi
          
          echo "Validation complete!"    

      - name: Update HTML links to point to minified files
        run: |
          # Update CSS and JS links in HTML files to point to minified versions (local files only, exclude external URLs)
          # Using patterns from minify-patterns.txt for maintainability
          find build -name '*.html' -type f -exec sed -i \
            -e 's/\(<link[^>]*href="\)\([^"]*[^/]\.css\)\("[^>]*>\)/\1\2.min\3/g' \
            -e '/href="http/!s/\(<link[^>]*href="\)\([^"]*\.css\)\("/\)/\1\2.min\3/g' \
            -e '/src="http/!s/\(<script[^>]*src="\)\([^"]*\.js\)\("/\)/\1\2.min\3/g' \
            {} \;
        
      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0
      - name: Upload artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          # Upload minified build directory
          path: 'build'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5
